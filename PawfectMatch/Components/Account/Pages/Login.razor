@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using PawfectMatch.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

@* Contenedor principal para centrar el contenido en toda la página *@
<div class="login-page-container">

    @* La "tarjeta" o "caja" que contendrá el formulario *@
    <div class="login-form-card">
        <section>
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login" novalidate>
                <DataAnnotationsValidator />

                <div class="login-form-header">
                    <h1 class="login-title">Log in</h1>
                    <h2 class="login-subtitle">Use a local account to log in.</h2>
                </div>

                <hr class="login-divider" />

                <StatusMessage Message="@errorMessage" />
                <ValidationSummary class="login-validation-summary" role="alert" />

                <div class="login-form-group">
                    <label for="email" class="login-label">Email</label>
                    <InputText @bind-Value="Input.Email" id="email" class="login-input form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <ValidationMessage For="() => Input.Email" class="login-validation-message" />
                </div>

                <div class="login-form-group">
                    <label for="password" class="login-label">Password</label>
                    <InputText type="password" @bind-Value="Input.Password" id="password" class="login-input form-control" autocomplete="current-password" aria-required="true" placeholder="••••••••" />
                    <ValidationMessage For="() => Input.Password" class="login-validation-message" />
                </div>

                <div class="login-remember-me">
                    <InputCheckbox @bind-Value="Input.RememberMe" id="remember-me" class="login-checkbox" />
                    <label for="remember-me" class="login-label-checkbox">
                        Remember me
                    </label>
                </div>

                <div class="login-form-group">
                    <button type="submit" class="login-submit-button">Log in</button>
                </div>

                <div class="login-links-section">
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </section>
    </div>
</div>


@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

@* --- NUEVOS ESTILOS PARA EL FORMULARIO DE LOGIN CENTRALIZADO --- *@
<style>
    
</style>