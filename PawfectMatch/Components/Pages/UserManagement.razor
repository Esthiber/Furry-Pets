@page "/user-management"
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer

@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@using PawfectMatch.Data
@using PawfectMatch.Constants

@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager

<div class="usermanagement-container">
    <div class="um-header">
        <h1 class="um-title"><i class="bi bi-people-fill"></i> Gestión de Usuarios</h1>
        <button class="um-btn-add" @onclick="StartCreateUser">
            <i class="bi bi-person-plus"></i> Nuevo Usuario
        </button>
    </div>

    @if (userList == null)
    {
        <div class="text-center py-5"><span class="spinner-border text-primary"></span> Cargando usuarios...</div>
    }
    else
    {
        <table class="um-table">
            <thead>
                <tr>
                    <th><i class="bi bi-envelope"></i> Email</th>
                    <th><i class="bi bi-person-badge"></i> Rol</th>
                    <th><i class="bi bi-gear"></i> Acciones</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in userList)
                {
                    <tr>
                        <td>@user.Email</td>
                        <td><span class="um-badge-role">@user.Role</span></td>
                        <td>
                            <button class="um-btn-edit" title="Editar usuario" @onclick="() => StartEditUser(user)"><i class="bi bi-pencil"></i> Editar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
</div>

@if (showModal)
{
    <div class="um-modal-overlay">
        <div class="um-modal-content">
            <div class="um-modal-header">
                <span class="um-modal-title">@(isNewUser ? "Crear Nuevo Usuario" : $"Editar Usuario: {editUserModel.Email}")</span>
                <button class="um-modal-close" @onclick="CloseModal"><i class="bi bi-x-lg"></i></button>
            </div>
            <div class="um-modal-body">
                <EditForm Model="@editUserModel" OnValidSubmit="HandleSaveUser">
                    <DataAnnotationsValidator />

                    @if (formErrors.Any())
                    {
                        <div class="alert alert-danger">
                            <ul class="mb-0">
                                @foreach (var error in formErrors)
                                {
                                    <li>@error</li>
                                }
                            </ul>
                        </div>
                    }

                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="editUserModel.Email" disabled="@(!isNewUser)" />
                            <ValidationMessage For="@(() => editUserModel.Email)" />
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="role" class="form-label">Rol</label>
                            <InputSelect id="role" class="form-select" @bind-Value="editUserModel.RoleId">
                                <option value="">-- Sin Rol --</option>
                                @foreach (var role in allRoles!)
                                {
                                    <option value="@role.Id">@role.Name</option>
                                }
                            </InputSelect>
                        </div>
                    </div>

                    @if (isNewUser)
                    {
                        <div class="mb-3">
                            <label for="password" class="form-label">Contraseña</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="editUserModel.Password" />
                            <ValidationMessage For="@(() => editUserModel.Password)" />
                        </div>
                    }

                    <hr />
                    <h5 class="mb-3"><i class="bi bi-shield-lock"></i> Gestión de Permisos</h5>

                    <div class="row">
                        @foreach (var moduleGroup in permissionsModel.GroupBy(p => p.Module))
                        {
                            <div class="col-md-4 mb-3">
                                <div class="card h-100">
                                    <div class="card-header bg-light text-primary fw-bold">
                                        <i class="bi bi-folder2-open"></i> @moduleGroup.Key
                                    </div>
                                    <div class="card-body">
                                        @foreach (var permission in moduleGroup)
                                        {
                                            <div class="form-check form-switch permission-switch">
                                                <InputCheckbox id="@permission.Permission" class="form-check-input" @bind-Value="permission.IsEnabled" />
                                                <label class="form-check-label" for="@permission.Permission">
                                                    @permission.DisplayName
                                                </label>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <div class="um-modal-footer">
                        <button type="button" class="um-btn-cancel" @onclick="CloseModal">Cancelar</button>
                        <button type="submit" class="um-btn-save">Guardar Cambios</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    // ---- Modelos de Vista ----
    private class UserViewModel
    {
        public string? Id { get; set; }
        public string? Email { get; set; }
        public string? Role { get; set; }
    }

    private class EditUserModel
    {
        public string? Id { get; set; }
        [Required, EmailAddress]
        public string? Email { get; set; }

        // La contraseña solo es relevante al crear, la validación se hará manualmente
        public string? Password { get; set; }

        public string? RoleId { get; set; }
    }

    // --- CAMBIO: Nuevo modelo para la UI de permisos ---
    private class PermissionViewModel
    {
        public string? Module { get; set; }
        public string? Permission { get; set; } // El valor real del claim, ej: "Permissions.Pets.Create"
        public string? DisplayName { get; set; } // El nombre a mostrar, ej: "Create"
        public bool IsEnabled { get; set; }
    }

    // ---- Propiedades del Componente ----
    private List<UserViewModel>? userList;
    private List<IdentityRole>? allRoles;
    private EditUserModel editUserModel = new();
    private List<PermissionViewModel> permissionsModel = new();
    private List<string> formErrors = new();
    private bool showModal = false;
    private bool isNewUser = false;

    // ---- Ciclo de Vida ----
    protected override async Task OnInitializedAsync()
    {
        allRoles = await RoleManager.Roles.ToListAsync();
        await LoadUsers();
    }

    // ---- Lógica de Carga y UI ----
    private async Task LoadUsers()
    {

        userList = new List<UserViewModel>();
        var users = UserManager.Users.ToList();
        foreach (var user in users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            userList.Add(new UserViewModel
            {
                Id = user.Id,
                Email = user.Email!,
                Role = roles.FirstOrDefault() ?? "Sin Rol"
            });
        }
    }

    // --- CAMBIO: Lógica para inicializar los checkboxes de permisos ---
    private void InitializePermissionsModel(IList<Claim> existingClaims)
    {
        permissionsModel.Clear();
        var allPermissions = Permissions.GetAllPermissions();

        foreach (var permissionValue in allPermissions)
        {
            var parts = permissionValue.Split('.');
            if (parts.Length != 3) continue; // Asegura que el formato es "Permissions.Modulo.Accion"

            permissionsModel.Add(new PermissionViewModel
            {
                Module = parts[1], // Ej: "Pets"
                DisplayName = parts[2], // Ej: "Create"
                Permission = permissionValue,
                IsEnabled = existingClaims?.Any(c => c.Type == permissionValue && c.Value == "true") ?? false
            });
        }
    }

    private void StartCreateUser()
    {
        isNewUser = true;
        editUserModel = new EditUserModel();
        formErrors.Clear();
        InitializePermissionsModel(null!); // Inicializa todos los permisos como deshabilitados
        showModal = true;
    }

    private async Task StartEditUser(UserViewModel userVm)
    {
        isNewUser = false;
        var user = await UserManager.FindByIdAsync(userVm.Id!);
        if (user == null) return;

        var userRoles = await UserManager.GetRolesAsync(user);
        var role = allRoles!.FirstOrDefault(r => r.Name == userRoles.FirstOrDefault());
        var userClaims = await UserManager.GetClaimsAsync(user);

        editUserModel = new EditUserModel
        {
            Id = user.Id,
            Email = user.Email!,
            RoleId = role?.Id!
        };
        formErrors.Clear();
        InitializePermissionsModel(userClaims); // Inicializa los permisos según los del usuario
        showModal = true;
    }

    private void CloseModal() => showModal = false;

    // ---- Lógica de Guardado (CRUD) ----
    private async Task HandleSaveUser()
    {
        formErrors.Clear();
        ApplicationUser? user;

        if (isNewUser)
        {
            if (string.IsNullOrWhiteSpace(editUserModel.Password) || editUserModel.Password.Length < 6)
            {
                formErrors.Add("La contraseña debe tener al menos 6 caracteres.");
                return;
            }
            user = new ApplicationUser { UserName = editUserModel.Email, Email = editUserModel.Email, EmailConfirmed = true };
            var result = await UserManager.CreateAsync(user, editUserModel.Password);
            if (!result.Succeeded)
            {
                formErrors.AddRange(result.Errors.Select(e => e.Description));
                return;
            }
        }
        else
        {
            user = await UserManager.FindByIdAsync(editUserModel.Id!);
            if (user == null)
            {
                formErrors.Add("Usuario no encontrado.");
                return;
            }
        }

        await AssignRoleAndClaims(user);
        CloseModal();
        await LoadUsers();
    }

    // --- CAMBIO: Lógica de guardado de permisos actualizada ---
    private async Task AssignRoleAndClaims(ApplicationUser user)
    {
        // Gestionar Rol (sin cambios)
        var currentRoles = await UserManager.GetRolesAsync(user);
        await UserManager.RemoveFromRolesAsync(user, currentRoles);
        if (!string.IsNullOrEmpty(editUserModel.RoleId))
        {
            var newRole = await RoleManager.FindByIdAsync(editUserModel.RoleId);
            if (newRole != null) await UserManager.AddToRoleAsync(user, newRole.Name!);
        }

        // Gestionar Claims (lógica mejorada)
        var existingClaims = await UserManager.GetClaimsAsync(user);

        foreach (var permission in permissionsModel)
        {
            var userHasClaim = existingClaims.Any(c => c.Type == permission.Permission);

            if (permission.IsEnabled && !userHasClaim)
            {
                // El checkbox está marcado, pero el usuario no tiene el claim -> Añadirlo
                await UserManager.AddClaimAsync(user, new Claim(permission.Permission!, "true"));
            }
            else if (!permission.IsEnabled && userHasClaim)
            {
                // El checkbox no está marcado, pero el usuario sí tiene el claim -> Quitarlo
                await UserManager.RemoveClaimAsync(user, existingClaims.First(c => c.Type == permission.Permission));
            }
        }
    }
}