@page "/solicitudes/crear/{id:int}"
@using System.Security.Claims
@using PawfectMatch.Models
@using PawfectMatch.Models.Adopciones
@using PawfectMatch.Models.Servicios
@using PawfectMatch.Services

@rendermode InteractiveServer

@inject SolicitudesAdopcionesService SolicitudesService
@inject MascotasAdopcionService MascotasService
@inject PersonasService PersonasService
@inject AdoptantesDetallesService AdoptantesDetallesService
@inject ServiciosService ServiciosService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Nav
@inject IToastService ToastService

<div class="adoption-wizard-container">
    <div class="wizard-steps">
        <div class="wizard-step @(step == 1 ? "active" : (step > 1 ? "done" : ""))">
            <span>1</span> Mascota
        </div>
        <div class="wizard-step @(step == 2 ? "active" : (step > 2 ? "done" : ""))">
            <span>2</span> Tus Datos
        </div>
        <div class="wizard-step @(step == 3 ? "active" : (step > 3 ? "done" : ""))">
            <span>3</span> Hogar
        </div>
        <div class="wizard-step @(step == 4 ? "active" : (step > 4 ? "done" : ""))">
            <span>4</span> Servicios
        </div>
        <div class="wizard-step @(step == 5 ? "active" : "")">
            <span>5</span> Confirmar
        </div>
    </div>

    @if (!string.IsNullOrEmpty(Error))
    {
        <div class="alert alert-danger">@Error</div>
    }
    @if (!string.IsNullOrEmpty(Success))
    {
        <div class="alert alert-success">@Success</div>
    }

    <div class="wizard-content">
        @if (step == 1)
        {
            <section class="pet-section">
                @if (Mascota == null)
                {
                    <div class="loading-pet">Cargando mascota...</div>
                }
                else
                {
                    <div class="pet-card">
                        <img src="@Mascota.FotoURL" alt="@Mascota.Nombre" />
                        <div class="pet-info">
                            <h2>@Mascota.Nombre</h2>
                            <span class="badge">@Mascota.Estado?.Nombre</span>
                            <div class="pet-details">
                                <span><i class="bi bi-rulers"></i> Tamaño: @Mascota.Tamanio" (@Mascota.RelacionSize?.Nombre)</span>
                                <span><i class="bi bi-calendar-heart"></i> Edad: @MostrarEdad(Mascota.FechaNacimiento)</span>
                            </div>
                            <p>@Mascota.Descripcion</p>
                        </div>
                    </div>
                    <div class="wizard-actions">
                        <button class="btn btn-primary" @onclick="() => step = 2">Siguiente <i class="bi bi-arrow-right"></i></button>
                    </div>
                }
            </section>
        }
        else if (step == 2)
        {
            <section class="persona-section">
                <h2>Tus Datos</h2>
                <EditForm Model="@Persona" OnValidSubmit="@OnPersonaSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-grid">
                        <div>
                            <label>Nombre</label>
                            <InputText class="form-control" @bind-Value="Persona.Nombre" />
                            <ValidationMessage For="() => Persona.Nombre" />
                        </div>
                        <div>
                            <label>Sexo</label>
                            <InputSelect class="form-control" @bind-Value="Persona.Sexo">
                                <option value="m">Masculino</option>
                                <option value="f">Femenino</option>
                                <option value="u">Otro/Prefiero no decir</option>
                            </InputSelect>
                        </div>
                        <div>
                            <label>Teléfono</label>
                            <InputText class="form-control" @bind-Value="Persona.Telefono" />
                            <ValidationMessage For="() => Persona.Telefono" />
                        </div>
                        <div>
                            <label>Email</label>
                            <InputText class="form-control" @bind-Value="Persona.Email" />
                        </div>
                        <div>
                            <label>Identificación</label>
                            <InputText class="form-control" @bind-Value="Persona.Identificacion" />
                        </div>
                        <div>
                            <label>Dirección</label>
                            <InputText class="form-control" @bind-Value="Persona.Direccion" />
                        </div>
                        <div>
                            <label>Fecha nacimiento</label>
                            <InputDate class="form-control" @bind-Value="Persona.FechaNacimiento" />
                        </div>
                        <div>
                            <label>Nacionalidad</label>
                            <InputText class="form-control" @bind-Value="Persona.Nacionalidad" />
                        </div>
                        <div>
                            <label>Estado civil</label>
                            <InputText class="form-control" @bind-Value="Persona.EstadoCivil" />
                        </div>
                    </div>
                    <div class="wizard-actions">
                        <button class="btn btn-secondary" type="button" @onclick="() => step = 1"><i class="bi bi-arrow-left"></i> Atrás</button>
                        <button class="btn btn-primary" type="submit">Siguiente <i class="bi bi-arrow-right"></i></button>
                    </div>
                </EditForm>
            </section>
        }
        else if (step == 3)
        {
            <section class="adoptantes-detalles-section">
                <h2>Detalles de tu Hogar</h2>
                <EditForm Model="Detalles" OnValidSubmit="@OnDetallesSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-grid">
                        <div>
                            <label>Tipo de vivienda</label>
                            <InputSelect class="form-control" @bind-value="Detalles.TipoViviendasID">
                                <option value="">Selecciona una opción</option>
                                <option value="0">Casa</option>
                                <option value="1">Departamento</option>
                                <option value="2">Otro</option>
                            </InputSelect>
                        </div>
                        <div>
                            <label>¿Vives en vivienda alquilada?</label>
                            <InputCheckbox class="form-check-input" @bind-Value="Detalles.ViveEnViviendaAlquilada" />
                        </div>
                        <div>
                            <label>¿Tienes jardín?</label>
                            <InputCheckbox class="form-check-input" @bind-Value="Detalles.TieneJardin" />
                        </div>
                        <div>
                            <label>Notas sobre el jardín</label>
                            <InputText class="form-control" @bind-Value="Detalles.NotasJardin" />
                        </div>
                        <div>
                            <label>¿Tienes otras mascotas?</label>
                            <InputCheckbox class="form-check-input" @bind-Value="Detalles.TieneOtrasMascotas" />
                        </div>
                        <div>
                            <label>Notas sobre otras mascotas</label>
                            <InputText class="form-control" @bind-Value="Detalles.NotasOtrasMascotas" />
                        </div>
                        <div>
                            <label>¿Cuántas horas al día estás fuera?</label>
                            <InputNumber class="form-control" @bind-Value="Detalles.HorasAusentes" />
                        </div>
                        <div>
                            <label>¿Por qué quieres adoptar?</label>
                            <InputText class="form-control" @bind-Value="Detalles.RazonAdopcion" />
                        </div>
                    </div>
                    <div class="wizard-actions">
                        <button class="btn btn-secondary" type="button" @onclick="() => step = 2"><i class="bi bi-arrow-left"></i> Atrás</button>
                        <button class="btn btn-primary" type="submit">Siguiente <i class="bi bi-arrow-right"></i></button>
                    </div>
                </EditForm>
            </section>
        }
        else if (step == 4)
        {
            <section class="servicios-section">
                <h2>Servicios Adicionales</h2>
                <button class="btn btn-outline-primary mb-2" @onclick="CargarServicios">Añadir Servicios</button>
                <div class="servicios-seleccionados">
                    @foreach (var s in ServiciosSeleccionados)
                    {
                        <span class="badge bg-secondary me-1">
                            @s.Nombre <button class="btn btn-sm btn-link text-danger" @onclick="() => QuitarServicio(s)">x</button>
                        </span>
                    }
                </div>
                @if (MostrarServicios)
                {
                    <div class="servicios-list-modal">
                        <div class="servicios-list">
                            @foreach (var servicio in ListaServicios)
                            {
                                <button class="btn btn-sm btn-success mb-1" @onclick="() => AgregarServicio(servicio)">
                                    <i class="bi bi-plus-circle"></i> @servicio.Nombre
                                </button>
                            }
                        </div>
                        <button class="btn btn-secondary mt-2" @onclick="@(() => MostrarServicios = false)">Cerrar</button>
                    </div>
                }
                <div class="wizard-actions">
                    <button class="btn btn-secondary" type="button" @onclick="() => step = 3"><i class="bi bi-arrow-left"></i> Atrás</button>
                    <button class="btn btn-primary" type="button" @onclick="() => step = 5">Siguiente <i class="bi bi-arrow-right"></i></button>
                </div>
            </section>
        }
        else if (step == 5)
        {
            <section class="confirm-section">
                <h2>Revisa y Confirma tu Solicitud</h2>
                <div class="summary-card">
                    <h4>Mascota</h4>
                    <div class="summary-pet">
                        <img src="@Mascota?.FotoURL" alt="@Mascota?.Nombre" />
                        <div>
                            <strong>@Mascota?.Nombre</strong>
                            <div>@Mascota?.Descripcion</div>
                        </div>
                    </div>
                    <h4>Tus Datos</h4>
                    <ul>
                        <li><b>Nombre:</b> @Persona.Nombre</li>
                        <li><b>Email:</b> @Persona.Email</li>
                        <li><b>Teléfono:</b> @Persona.Telefono</li>
                        <li><b>Dirección:</b> @Persona.Direccion</li>
                    </ul>
                    <h4>Detalles del Hogar</h4>
                    <ul>
                        <li><b>Tipo de vivienda:</b> @(Detalles.TipoViviendasID == 0 ? "Casa" : Detalles.TipoViviendasID == 1 ? "Departamento" : "Otro")</li>
                        <li><b>Jardín:</b> @(Detalles.TieneJardin ? "Sí" : "No")</li>
                        <li><b>Otras mascotas:</b> @(Detalles.TieneOtrasMascotas ? "Sí" : "No")</li>
                        <li><b>Horas fuera:</b> @Detalles.HorasAusentes</li>
                    </ul>
                    <h4>Servicios Adicionales</h4>
                    <ul>
                        @if (ServiciosSeleccionados.Any())
                        {
                            @foreach (var s in ServiciosSeleccionados)
                            {
                                <li>@s.Nombre</li>
                            }
                        }
                        else
                        {
                            <li>No se seleccionaron servicios adicionales.</li>
                        }
                    </ul>
                </div>
                <div class="wizard-actions">
                    <button class="btn btn-secondary" type="button" @onclick="() => step = 4"><i class="bi bi-arrow-left"></i> Atrás</button>
                    <button class="btn btn-success btn-lg" @onclick="GuardarSolicitud"><i class="bi bi-send"></i> Enviar Solicitud</button>
                </div>
            </section>
        }
    </div>
</div>

@code {
    [Parameter] public int id { get; set; }

    MascotasAdopcion? Mascota { get; set; }
    Personas Persona { get; set; } = new();
    AdoptantesDetalles Detalles { get; set; } = new();
    List<Servicios> ListaServicios { get; set; } = new();
    List<Servicios> ServiciosSeleccionados { get; set; } = new();
    bool MostrarServicios = false;

    string? Error;
    string? Success;
    int step = 1;

    protected override async Task OnInitializedAsync()
    {
        Mascota = await MascotasService.SearchByIdAsync(id);

        var authState = await AuthProvider.GetAuthenticationStateAsync();
        Persona.Email = authState.User.FindFirstValue(ClaimTypes.Email) ?? "";
        var yaExiste = await PersonasService.ListAsync(p => p.Email == Persona.Email && !p.IsDeleted);
        if (yaExiste.Any())
        {
            Persona = yaExiste.First();
            var detalles = await AdoptantesDetallesService.ListAsync(x => x.PersonasID == Persona.PersonasID && !x.IsDeleted);
            if (detalles.Any()) Detalles = detalles.First();
        }
        Detalles.PersonasID = Persona.PersonasID;
    }

    async Task OnPersonaSubmit()
    {
        Error = Success = null;
        if (Persona.PersonasID == 0)
        {
            await PersonasService.InsertAsync(Persona);
            var personas = await PersonasService.ListAsync(p => p.Email == Persona.Email);
            Persona = personas.FirstOrDefault() ?? Persona;
        }
        else
        {
            await PersonasService.UpdateAsync(Persona);
        }
        Detalles.PersonasID = Persona.PersonasID;
        step = 3;
    }

    async Task OnDetallesSubmit()
    {
        Error = Success = null;
        if (Detalles.AdoptantesDetallesID == 0)
        {
            await AdoptantesDetallesService.InsertAsync(Detalles);
        }
        else
        {
            await AdoptantesDetallesService.UpdateAsync(Detalles);
        }
        step = 4;
    }

    async Task CargarServicios()
    {
        ListaServicios = await ServiciosService.ListAsync(s => !s.IsDeleted);
        MostrarServicios = true;
    }

    void AgregarServicio(Servicios servicio)
    {
        if (!ServiciosSeleccionados.Any(s => s.ServiciosID == servicio.ServiciosID))
        {
            ServiciosSeleccionados.Add(servicio);
        }
    }

    void QuitarServicio(Servicios servicio)
    {
        ServiciosSeleccionados.RemoveAll(s => s.ServiciosID == servicio.ServiciosID);
    }

    async Task GuardarSolicitud()
    {
        Error = Success = null;
        if (Persona.PersonasID == 0)
        {
            Error = "Primero debes guardar tus datos personales.";
            step = 2;
            return;
        }
        if (Detalles.AdoptantesDetallesID == 0)
        {
            Error = "Debes guardar los detalles de tu situación antes de enviar la solicitud.";
            step = 3;
            return;
        }
        if (Mascota == null)
        {
            Error = "No se encontró la mascota a adoptar.";
            step = 1;
            return;
        }

        var solicitud = new SolicitudesAdopciones
        {
            PersonasID = Persona.PersonasID,
            MascotasAdopcionID = Mascota.MascotasAdopcionID,
            EstadoSolicitudID = 1,
            Fecha = DateTime.Now
        };

        var insertado = await SolicitudesService.InsertAsync(solicitud);
        if (!insertado)
        {
            Error = "No se pudo enviar la solicitud. Intenta nuevamente.";
            return;
        }

        Success = "¡Tu solicitud ha sido enviada exitosamente! Nos pondremos en contacto contigo pronto.";
        ToastService.ShowSuccess(Success);

        await Task.Delay(2500);
        Nav.NavigateTo("/solicitudes");
    }

    string MostrarEdad(DateOnly? fechaNacimiento)
    {
        if (fechaNacimiento is null) return "Desconocida";
        var hoy = DateOnly.FromDateTime(DateTime.Today);
        int edad = hoy.Year - fechaNacimiento.Value.Year;
        if (fechaNacimiento.Value.AddYears(edad) > hoy)
        {
            edad--;
        }
        return edad == 1 ? "1 año" : $"{edad} años";
    }
}