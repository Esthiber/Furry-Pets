@page "/productos"
@using PawfectMatch.Models.POS
@inject ProductosService ProductosService
@inject NavigationManager NavigationManager
@inject CategoriasProductosService CategoriasProductosService
@inject ProveedoresService ProveedoresService
@rendermode InteractiveServer

<div class="productos-admin-container">
    <div class="header-section">
        <div>
            <h2>Productos</h2>
            <p class="subtitle">Panel administrativo de productos en inventario</p>
        </div>
        <div class="summary-cards">
            <div class="summary-card total">
                <span class="summary-label">Total</span>
                <span class="summary-value">@productos.Count</span>
            </div>
            @foreach (var cat in categorias)
            {
                <div class="summary-card">
                    <span class="summary-label">@cat.Nombre</span>
                    <span class="summary-value">@productos.Count(p => p.CategoriasProductosID == cat.CategoriasProductosID)</span>
                </div>
            }
        </div>
        <button class="btn btn-primary" @onclick="CrearProducto">
            <i class="bi bi-plus-circle"></i> Nuevo Producto
        </button>
    </div>

    <div class="filters-section">
        <div class="search-group">
            <input type="text" class="form-control" placeholder="Buscar por ID o Nombre..." @bind="filtro" @bind:event="oninput" />
            <button class="btn btn-outline-secondary" @onclick="LimpiarFiltro" title="Limpiar búsqueda">
                <i class="bi bi-x-circle"></i>
            </button>
        </div>
        <select class="form-select" @bind="filtroCategoria">
            <option value="">Categoría</option>
            @foreach (var cat in categorias)
            {
                <option value="@cat.CategoriasProductosID">@cat.Nombre</option>
            }
        </select>
        <select class="form-select" @bind="filtroProveedor">
            <option value="">Proveedor</option>
            @foreach (var prov in proveedores)
            {
                <option value="@prov.ProveedoresID">@prov.Nombre</option>
            }
        </select>
        <select class="form-select" @bind="filtroStock">
            <option value="">Stock</option>
            <option value="0">Sin stock</option>
            <option value="1-10">1-10</option>
            <option value="10-50">10-50</option>
            <option value="50+">50+</option>
        </select>
    </div>

    <div class="productos-grid">
        @if (productosFiltrados == null)
        {
            <div class="loading">Cargando productos...</div>
        }
        else if (!productosFiltrados.Any())
        {
            <div class="empty-state">
                <i class="bi bi-emoji-frown"></i>
                <p>No se encontraron productos con los filtros seleccionados.</p>
            </div>
        }
        else
        {
            @foreach (var producto in productosFiltrados)
            {
                <div class="producto-card" @onclick="() => AbrirModal(producto)">
                    <div class="producto-img">
                        <img src="@(producto.ImagenUrl ?? "https://via.placeholder.com/150")" alt="@producto.Nombre" />
                    </div>
                    <div class="producto-info">
                        <div class="producto-header">
                            <span class="producto-id">#@producto.ProductosID</span>
                            <span class="producto-stock">Stock: @producto.Stock</span>
                        </div>
                        <h4 class="producto-nombre">@producto.Nombre</h4>
                        <div class="producto-categoria">
                            <i class="bi bi-bookmark-heart"></i> @categorias.FirstOrDefault(c => c.CategoriasProductosID == producto.CategoriasProductosID)?.Nombre
                        </div>
                        <div class="producto-details">
                            <span><i class="bi bi-currency-dollar"></i> @producto.Precio.ToString("N2")</span>
                            <span><i class="bi bi-truck"></i> @proveedores.FirstOrDefault(p => p.ProveedoresID == producto.ProveedoresID)?.Nombre</span>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    @if (productoSeleccionado != null)
    {
        <div class="modal-backdrop"></div>
        <div class="modal show" style="display: block;">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Editar Producto: @productoSeleccionado.Nombre</h5>
                        <button type="button" class="btn-close" @onclick="CerrarModal"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="@productoSeleccionado" OnValidSubmit="GuardarCambios">
                            <DataAnnotationsValidator />
                            <div class="form-row">
                                <div>
                                    <label>Nombre</label>
                                    <InputText class="form-control" @bind-Value="productoSeleccionado.Nombre" />
                                    <ValidationMessage For="@(() => productoSeleccionado.Nombre)" />
                                </div>
                                <div>
                                    <label>Categoría</label>
                                    <InputSelect class="form-control" @bind-Value="productoSeleccionado.CategoriasProductosID">
                                        @foreach (var cat in categorias)
                                        {
                                            <option value="@cat.CategoriasProductosID">@cat.Nombre</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div>
                                    <label>Proveedor</label>
                                    <InputSelect class="form-control" @bind-Value="productoSeleccionado.ProveedoresID">
                                        @foreach (var prov in proveedores)
                                        {
                                            <option value="@prov.ProveedoresID">@prov.Nombre</option>
                                        }
                                    </InputSelect>
                                </div>
                                <div>
                                    <label>Precio</label>
                                    <InputNumber class="form-control" @bind-Value="productoSeleccionado.Precio" />
                                    <ValidationMessage For="@(() => productoSeleccionado.Precio)" />
                                </div>
                                <div>
                                    <label>Costo</label>
                                    <InputNumber class="form-control" @bind-Value="productoSeleccionado.Costo" />
                                    <ValidationMessage For="@(() => productoSeleccionado.Costo)" />
                                </div>
                                <div>
                                    <label>Stock</label>
                                    <InputNumber class="form-control" @bind-Value="productoSeleccionado.Stock" />
                                    <ValidationMessage For="@(() => productoSeleccionado.Stock)" />
                                </div>
                                <div>
                                    <label>URL de Imagen</label>
                                    <InputText class="form-control" @bind-Value="productoSeleccionado.ImagenUrl" />
                                </div>
                            </div>
                            <div class="form-row">
                                <label>Descripción</label>
                                <InputTextArea class="form-control" @bind-Value="productoSeleccionado.Descripcion" />
                            </div>
                            <div class="modal-actions">
                                <button type="submit" class="btn btn-primary">Guardar Cambios</button>
                                <button type="button" class="btn btn-secondary" @onclick="CerrarModal">Cancelar</button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private List<Productos> productos = new();
    private List<Productos> productosFiltrados = new();
    private Productos? productoSeleccionado = null;
    private List<CategoriasProductos> categorias = new();
    private List<Proveedores> proveedores = new();

    protected override async Task OnInitializedAsync()
    {
        productos = await ProductosService.ListAsync(p => !p.IsDeleted);
        categorias = await CategoriasProductosService.ListAsync(c => !c.IsDeleted);
        proveedores = await ProveedoresService.ListAsync(p => !p.IsDeleted);
        FiltrarProductos();
    }

    private void FiltrarProductos()
    {
        IEnumerable<Productos> query = productos;

        // Filtro por texto
        if (!string.IsNullOrWhiteSpace(filtro))
        {
            query = query.Where(p =>
                p.ProductosID.ToString().Contains(filtro, StringComparison.OrdinalIgnoreCase) ||
                p.Nombre.Contains(filtro, StringComparison.OrdinalIgnoreCase));
        }

        // Filtro por categoría
        if (!string.IsNullOrWhiteSpace(filtroCategoria) && int.TryParse(filtroCategoria, out var catId))
            query = query.Where(p => p.CategoriasProductosID == catId);

        // Filtro por proveedor
        if (!string.IsNullOrWhiteSpace(filtroProveedor) && int.TryParse(filtroProveedor, out var provId))
            query = query.Where(p => p.ProveedoresID == provId);

        // Filtro por stock
        if (!string.IsNullOrWhiteSpace(filtroStock))
        {
            query = filtroStock switch
            {
                "0" => query.Where(p => p.Stock == 0),
                "1-10" => query.Where(p => p.Stock >= 1 && p.Stock <= 10),
                "10-50" => query.Where(p => p.Stock > 10 && p.Stock <= 50),
                "50+" => query.Where(p => p.Stock > 50),
                _ => query
            };
        }

        productosFiltrados = query.OrderByDescending(p => p.ProductosID).ToList();
    }

    private void LimpiarFiltro()
    {
        filtro = string.Empty;
        filtroCategoria = string.Empty;
        filtroProveedor = string.Empty;
        filtroStock = string.Empty;
        FiltrarProductos();
    }

    private void CrearProducto()
    {
        NavigationManager.NavigateTo("/ventas/crear");
    }

    private void AbrirModal(Productos producto)
    {
        productoSeleccionado = new Productos
        {
            ProductosID = producto.ProductosID,
            Nombre = producto.Nombre,
            Descripcion = producto.Descripcion,
            Costo = producto.Costo,
            Precio = producto.Precio,
            Stock = producto.Stock,
            ImagenUrl = producto.ImagenUrl,
            CategoriasProductosID = producto.CategoriasProductosID,
            ProveedoresID = producto.ProveedoresID,
            IsDeleted = producto.IsDeleted
        };
    }

    private void CerrarModal()
    {
        productoSeleccionado = null;
    }

    private async Task GuardarCambios()
    {
        if (productoSeleccionado != null)
        {
            var result = await ProductosService.SaveAsync(productoSeleccionado);
            if (result)
            {
                var index = productos.FindIndex(p => p.ProductosID == productoSeleccionado.ProductosID);
                if (index >= 0)
                {
                    productos[index] = productoSeleccionado;
                }
                FiltrarProductos();
                CerrarModal();
            }
        }
    }

    // Reactividad para filtros
    private string _filtro;
    private string _filtroCategoria;
    private string _filtroProveedor;
    private string _filtroStock;

    private string filtro
    {
        get => _filtro;
        set { _filtro = value; FiltrarProductos(); }
    }
    private string filtroCategoria
    {
        get => _filtroCategoria;
        set { _filtroCategoria = value; FiltrarProductos(); }
    }
    private string filtroProveedor
    {
        get => _filtroProveedor;
        set { _filtroProveedor = value; FiltrarProductos(); }
    }
    private string filtroStock
    {
        get => _filtroStock;
        set { _filtroStock = value; FiltrarProductos(); }
    }
}