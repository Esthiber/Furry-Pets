@page "/pos"
@using PawfectMatch.Components.Layout
@using PawfectMatch.Models
@using PawfectMatch.Models.POS
@using PawfectMatch.Services
@inject ProductosInTabsService ProductosInTabsService
@inject VetasTabsService VetasTabsService
@inject ProductosService ProductosService
@layout VentasLayout
@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin,User")]

<div class="tabs">
    @foreach (var tab in VetasTabsDisponibles)
    {
        <button class="tab-button @(tab.VetasTabsID == activeTabId ? "active" : "")" @onclick="@(() => cambiarTab(tab.VetasTabsID))">
            <i class="bi bi-@tab.Icono"></i> @tab.Nombre
        </button>
    }
</div>

<div class="facturacion-wrapper">
    <div class="facturacion-layout">
        <div class="facturacion-productos">
            @if (ProductosDisponibles == null)
            {
                <div>Cargando productos...</div>
            }
            else if (!ProductosDisponibles.Any())
            {
                <div>No hay productos disponibles.</div>
            }
            else
            {
                @foreach (var prod in ProductosDisponibles)
                {
                    <CardProductos Producto="prod" OnSeleccionarProducto="AgregarProducto" />
                }
            }
        </div>
        <div class="facturacion-lista">
            <ListaCompra ProductosSeleccionados="Carrito"
                         OnEliminarProducto="QuitarProducto"
                         OnIngresarCliente="OnIngresarCliente"
                         OnProcesarPago="OnProcesarPago" />
        </div>
    </div>
</div>

<!-- Modal Cliente -->
@if (mostrarModalCliente)
{
    <div class="modal-overlay" @onclick="CerrarModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h2>Información del Cliente</h2>
                <button class="modal-close" @onclick="CerrarModal">&times;</button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="nombre">Nombre</label>
                    <input type="text" id="nombre" class="form-control" @bind="clienteTemp.Nombre" placeholder="Ingrese el nombre del cliente" />
                </div>
                <div class="form-group">
                    <label for="telefono">Teléfono</label>
                    <input type="tel" id="telefono" class="form-control" @bind="clienteTemp.Telefono" placeholder="Ingrese el teléfono" />
                </div>
                <div class="form-group">
                    <label for="direccion">Dirección</label>
                    <textarea id="direccion" class="form-control" @bind="clienteTemp.Direccion" placeholder="Ingrese la dirección" rows="3"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn-cancel" @onclick="CerrarModal">Cancelar</button>
                <button class="btn-save" @onclick="GuardarCliente">Guardar Cliente</button>
            </div>
        </div>
    </div>
}

<!-- Modal Pago -->
@if (mostrarModalPago)
{
    <div class="modal-overlay" @onclick="CerrarModalPago">
        <div class="modal-pago-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h2>Procesar Pago</h2>
                <button class="modal-close" @onclick="CerrarModalPago">&times;</button>
            </div>
            <div class="modal-pago-body">
                <div class="pago-section">
                    <h3>Cliente</h3>
                    <p class="cliente-info">@(Cliente?.Nombre ?? "No especificado")</p>
                </div>
                <div class="pago-section">
                    <h3>Resumen de Compra</h3>
                    <div class="productos-resumen">
                        @foreach (var grupo in productosAgrupados)
                        {
                            <div class="producto-linea">
                                <span class="producto-nombre">@grupo.Producto.Nombre</span>
                                <span class="producto-cantidad">$@grupo.Producto.Precio x @grupo.Cantidad</span>
                                <span class="producto-subtotal">$@((grupo.Producto.Precio * grupo.Cantidad).ToString("F2"))</span>
                            </div>
                        }
                    </div>
                </div>
                <div class="pago-section totales">
                    <div class="total-linea">
                        <span>Subtotal:</span>
                        <span>$@subtotal.ToString("F2")</span>
                    </div>
                    <div class="total-linea total-final">
                        <span>Total:</span>
                        <span>$@total.ToString("F2")</span>
                    </div>
                </div>
                <div class="pago-section">
                    <h3>Método de Pago</h3>
                    <select class="form-control" @bind="metodoPago">
                        <option value="Efectivo">Efectivo</option>
                        <option value="Tarjeta">Tarjeta</option>
                        <option value="Transferencia">Transferencia</option>
                    </select>
                </div>
                @if (metodoPago == "Efectivo")
                {
                    <div class="pago-section">
                        <h3>Monto Recibido</h3>
                        <div class="monto-input-group">
                            <input type="number" class="form-control monto-input" @bind="montoPagado" @bind:event="oninput"
                                   placeholder="0.00" step="0.01" min="0" />
                            <button class="btn-monto-exacto" @onclick="EstablecerMontoExacto">Monto Exacto</button>
                        </div>
                        @if (montoPagado > 0)
                        {
                            <div class="cambio-info">
                                <span>Cambio a devolver:</span>
                                <span class="@(cambio < 0 ? "cambio-negativo" : "cambio-positivo")">
                                    $@Math.Abs(cambio).ToString("F2")
                                </span>
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button class="btn-cancel" @onclick="CerrarModalPago">Cancelar</button>
                <button class="btn-pay" @onclick="EfectuarPago" disabled="@(!PuedeEfectuarPago())">Efectuar Pago</button>
            </div>
        </div>
    </div>
}

@code {
    List<VetasTabs> VetasTabsDisponibles = new();
    List<Productos> ProductosDisponibles = new();
    List<Productos> Carrito = new();
    int activeTabId;

    Personas? Cliente { get; set; }
    Personas clienteTemp = new();
    bool mostrarModalCliente = false;
    bool mostrarModalPago = false;

    string metodoPago = "Efectivo";
    decimal montoPagado = 0;
    decimal subtotal => Carrito.Sum(p => p.Precio);
    decimal total => subtotal;
    decimal cambio => montoPagado - total;

    List<(Productos Producto, int Cantidad)> productosAgrupados =>
        Carrito.GroupBy(p => p.ProductosID)
               .Select(g => (g.First(), g.Count()))
               .ToList();

    protected override async Task OnInitializedAsync()
    {
        Cliente = new Personas();
        VetasTabsDisponibles = await VetasTabsService.ListAsync(t => !t.IsDeleted);
        if (VetasTabsDisponibles.Count > 0)
        {
            activeTabId = VetasTabsDisponibles.First().VetasTabsID;
            await CargarProductos();
        }
    }

    async Task cambiarTab(int tabId)
    {
        activeTabId = tabId;
        await CargarProductos();
    }

    async Task CargarProductos()
    {
        var productosInTabs = await ProductosInTabsService.ListAsync(p => p.VetasTabsID == activeTabId && !p.IsDeleted);
        ProductosDisponibles = productosInTabs
            .Where(p => p.Producto != null && !p.Producto.IsDeleted && p.Producto.Stock > 0)
            .Select(p => p.Producto!)
            .ToList();
    }

    void AgregarProducto(Productos producto)
    {
        Carrito.Add(producto);
        StateHasChanged();
    }

    void QuitarProducto(Productos producto)
    {
        Carrito.Remove(producto);
        StateHasChanged();
    }

    void OnIngresarCliente()
    {
        clienteTemp = new Personas();
        mostrarModalCliente = true;
    }

    void GuardarCliente()
    {
        // if (string.IsNullOrWhiteSpace(clienteTemp.Nombre) ||
        //     string.IsNullOrWhiteSpace(clienteTemp.Telefono) ||
        //     string.IsNullOrWhiteSpace(clienteTemp.Direccion)) return;

        Cliente = new Personas
        {
            Nombre = clienteTemp.Nombre,
            Telefono = clienteTemp.Telefono,
            Direccion = clienteTemp.Direccion,
            Sexo = 'u',
            Identificacion = string.Empty,
            Email = string.Empty,
            Nacionalidad = string.Empty,
            EstadoCivil = string.Empty
        };

        mostrarModalCliente = false;
        StateHasChanged();
    }

    void OnProcesarPago()
    {
        if (Carrito.Count == 0) return;

        if (Cliente == null || string.IsNullOrEmpty(Cliente.Nombre))
        {
            OnIngresarCliente();
            return;
        }

        montoPagado = 0;
        metodoPago = "Efectivo";
        mostrarModalPago = true;
    }

    void CerrarModal() => mostrarModalCliente = false;

    void CerrarModalPago()
    {
        mostrarModalPago = false;
        montoPagado = 0;
    }

    void EstablecerMontoExacto() => montoPagado = total;

    bool PuedeEfectuarPago() =>
        metodoPago == "Efectivo" ? montoPagado >= total : true;

    async Task EfectuarPago()
    {
        // TODO: Implementar lógica real de facturación
        CerrarModalPago();
        Carrito.Clear();
        Cliente = new Personas();
        StateHasChanged();
    }
}
