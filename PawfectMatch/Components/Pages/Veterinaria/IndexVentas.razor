@page "/pos"
@using PawfectMatch.Components.Layout
@using PawfectMatch.Models
@using PawfectMatch.Models.POS
@using PawfectMatch.Services
@inject ProductosInTabsService ProductosInTabsService
@inject VetasTabsService VetasTabsService
@inject ProductosService ProductosService
@inject PersonasService PersonasService
@layout VentasLayout
@rendermode InteractiveServer

@* @attribute [Authorize(Roles = "Admin,User")] *@

<div class="tabs">
    @foreach (var tab in VetasTabsDisponibles.OrderBy(t => t.Orden))
    {
        <button class="tab-button @(tab.VetasTabsID == activeTabId ? "active" : "")" @onclick="@(() => cambiarTab(tab.VetasTabsID))">
            <i class="bi bi-@tab.Icono"></i> @tab.Nombre
        </button>
    }
</div>

<div class="facturacion-wrapper">
    <div class="facturacion-layout">
        <div class="facturacion-productos">
            @if (ProductosDisponibles == null)
            {
                <div>Cargando productos...</div>
            }
            else if (!ProductosDisponibles.Any())
            {
                <div>No hay productos disponibles.</div>
            }
            else
            {
                @foreach (var prod in ProductosDisponibles)
                {
                    <CardProductos Producto="prod" OnSeleccionarProducto="AgregarProducto" />
                }
            }
        </div>
        <div class="facturacion-lista">
            <ListaCompra ProductosSeleccionados="Carrito"
                         OnEliminarProducto="QuitarProducto"
                         OnIngresarCliente="OnIngresarCliente"
                         OnProcesarPago="OnProcesarPago" />
        </div>
    </div>
</div>

<!-- Modal Cliente extraído a componente -->
<ModalCliente Mostrar="mostrarModalCliente"
              ClientesFiltrados="clientesFiltrados"
              Busqueda="busquedaCliente"
              ClienteTemp="Cliente"
              Cerrar="CerrarModal"
              OnGuardar="GuardarCliente"
              OnSeleccionar="SeleccionarCliente" />

<!-- Modal Pago extraído a componente -->
<ModalPago Mostrar="mostrarModalPago"
           Cliente="Cliente"
           ProductosAgrupados="productosAgrupados"
           Subtotal="subtotal"
           Total="total"
           MetodoPago="metodoPago"
           MontoPagado="montoPagado"
           Cerrar="CerrarModalPago"
           OnEfectuarPago="EfectuarPago" />

@code {
    List<VetasTabs> VetasTabsDisponibles = new();
    List<Productos> ProductosDisponibles = new();
    List<Productos> Carrito = new();
    int activeTabId;

    Personas? Cliente { get; set; }
    bool mostrarModalCliente = false;
    bool mostrarModalPago = false;

    string metodoPago = "Efectivo";
    decimal montoPagado = 0;
    decimal subtotal => Carrito.Sum(p => p.Precio);
    decimal total => subtotal;

    List<(Productos Producto, int Cantidad)> productosAgrupados =>
        Carrito.GroupBy(p => p.ProductosID)
               .Select(g => (g.First(), g.Count()))
               .ToList();

    // --- NUEVO PARA BUSQUEDA Y SELECCION DE CLIENTES ---
    List<Personas> clientes = new();
    List<Personas> clientesFiltrados = new();
    string busquedaCliente = "";

    protected override async Task OnInitializedAsync()
    {
        Cliente = await PersonasService.SearchByIdAsync(1); // Cliente default
        VetasTabsDisponibles = await VetasTabsService.ListAsync(t => !t.IsDeleted);
        if (VetasTabsDisponibles.Count > 0)
        {
            // Seleccionar el primer tab según el orden
            var primerTab = VetasTabsDisponibles.OrderBy(t => t.Orden).First();
            activeTabId = primerTab.VetasTabsID;
            await CargarProductos();
        }
        clientes = await PersonasService.ListAsync(p => !p.IsDeleted);
        FiltrarClientes();
    }

    async Task cambiarTab(int tabId)
    {
        activeTabId = tabId;
        await CargarProductos();
    }

    async Task CargarProductos()
    {
        var productosInTabs = await ProductosInTabsService.ListAsync(p => p.VetasTabsID == activeTabId && !p.IsDeleted);
        ProductosDisponibles = productosInTabs
            .Where(p => p.Producto != null && !p.Producto.IsDeleted && p.Producto.Stock > 0)
            .OrderBy(p => p.Orden) // Ordenar según el campo Orden
            .Select(p => p.Producto!)
            .ToList();
    }

    async Task ReloadClientes()
    {
        clientes = await PersonasService.ListAsync(p => !p.IsDeleted);
        FiltrarClientes();
    }

    void AgregarProducto(Productos producto)
    {
        Carrito.Add(producto);
        StateHasChanged();
    }

    void QuitarProducto(Productos producto)
    {
        Carrito.Remove(producto);
        StateHasChanged();
    }

    async Task OnIngresarCliente()
    {
        if (Cliente!.PersonasID == 1) Cliente = new Personas();
        busquedaCliente = "";
        await ReloadClientes();
        mostrarModalCliente = true;
    }

    void FiltrarClientes()
    {
        if (string.IsNullOrWhiteSpace(busquedaCliente))
        {
            clientesFiltrados = clientes.ToList();
        }
        else
        {
            var filtro = busquedaCliente.Trim().ToLower();
            clientesFiltrados = clientes.Where(c =>
                (!string.IsNullOrWhiteSpace(c.Nombre) && c.Nombre.ToLower().Contains(filtro)) ||
                (!string.IsNullOrWhiteSpace(c.Telefono) && c.Telefono.ToLower().Contains(filtro))
            ).ToList();
        }
    }

    async Task SeleccionarCliente(Personas persona)
    {
        Cliente = persona;
        await ReloadClientes();
        StateHasChanged();
    }

    async Task GuardarCliente()
    {
        await PersonasService.SaveAsync(Cliente!);
        mostrarModalCliente = false;
        await ReloadClientes();
        StateHasChanged();
    }

    void OnProcesarPago()
    {
        if (Carrito.Count == 0) return;

        if (string.IsNullOrWhiteSpace(Cliente?.Nombre) && string.IsNullOrWhiteSpace(Cliente?.Telefono))
        {
            Cliente = clientes.FirstOrDefault(c => c.PersonasID == 1) ?? new Personas();
        }

        montoPagado = 0;
        mostrarModalPago = true;
    }

    void CerrarModal() => mostrarModalCliente = false;

    void CerrarModalPago()
    {
        mostrarModalPago = false;
        montoPagado = 0;
    }

    async Task EfectuarPago()
    {
        // TODO: Implementar lógica real de facturación
        CerrarModalPago();
        Carrito.Clear();
        Cliente = await PersonasService.SearchByIdAsync(1);
        StateHasChanged();
    }
}
