@page "/Producto/ComprarProducto"
@using PawfectMatch.Services.Adopciones
@using PawfectMatch.Services.Veterinaria
@inject ProductoService productoService
@inject ProveedoresService proveedoresService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Crear Producto</PageTitle>

<div class="producto-container">
    <div class="producto-header">
        <h1 class="producto-title">Crear Nuevo Producto</h1>
        <div class="producto-actions">
            <button class="btn-secondary" @onclick="VolverAlIndice">
                <i class="fas fa-arrow-left"></i> Volver
            </button>
        </div>
    </div>

    <div class="producto-form-container">
        @if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="error-message">
                <i class="fas fa-exclamation-circle"></i>
                <span>@ErrorMessage</span>
            </div>
        }

        <EditForm Model="@producto" OnValidSubmit="@OnValidSubmit" class="producto-form">
            <DataAnnotationsValidator />
            <ValidationSummary class="validation-summary" />

            <div class="form-section">
                <div class="form-group">
                    <label>Nombre del Producto:</label>
                    <InputText class="form-control" @bind-Value="@producto.Nombre" />
                    <ValidationMessage For="@(() => producto.Nombre)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label>Descripción:</label>
                    <InputText class="form-control" @bind-Value="@producto.Descripcion" />
                    <ValidationMessage For="@(() => producto.Descripcion)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label>Imagen del Producto:</label>
                    @if (!string.IsNullOrEmpty(producto.ImagenURL))
                    {
                        <div class="image-preview">
                            <img src="@producto.ImagenURL" alt="Imagen del producto" />
                        </div>
                    }
                    <InputFile OnChange="HandleFileUpload" accept="image/*" class="form-control mb-2" />
                    <InputText class="form-control" @bind-Value="@producto.ImagenURL" placeholder="O ingrese URL de imagen" />
                    <small class="text-muted">Formatos aceptados: JPG, PNG, GIF (Máx. 2MB)</small>
                    <ValidationMessage For="@(() => producto.ImagenURL)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label>Precio:</label>
                    <InputNumber class="form-control" @bind-Value="@producto.Precio" />
                    <ValidationMessage For="@(() => producto.Precio)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label>Cantidad en Stock:</label>
                    <InputNumber class="form-control" @bind-Value="@producto.Stock" />
                    <ValidationMessage For="@(() => producto.Stock)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label>Tipo de Categoría:</label>
                    <InputText class="form-control" @bind-Value="@producto.TipoCategoria" />
                    <ValidationMessage For="@(() => producto.TipoCategoria)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label>Proveedor:</label>
                    <InputSelect class="form-control" @bind-Value="@producto.ProveedorId">
                        <option value="">Seleccione un Proveedor</option>
                        @foreach (var proveedor in ListaProveedores)
                        {
                            <option value="@proveedor.ProveedorId">@proveedor.Nombre</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => producto.ProveedorId)" class="validation-message" />
                </div>
            </div>

            <div class="form-actions">
                <button type="submit" class="btn-primary">
                    <i class="fas fa-save"></i> Guardar Producto
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    // Propiedades existentes (se mantienen igual)
    public PawfectMatch.Models.Productos producto { get; set; } = new PawfectMatch.Models.Productos();
    public List<PawfectMatch.Models.Proveedores> ListaProveedores { get; set; } = new List<PawfectMatch.Models.Proveedores>();
    public string ErrorMessage { get; set; } = string.Empty;

    // Método para subir imágenes (nuevo)
    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.File;

            // Validar tamaño (2MB máximo)
            if (file.Size > 2 * 1024 * 1024)
            {
                ErrorMessage = "La imagen es demasiado grande (Máximo 2MB)";
                return;
            }

            // Validar tipo de archivo
            var allowedExtensions = new[] { ".jpg", ".jpeg", ".png", ".gif", ".webp" };
            var fileExtension = Path.GetExtension(file.Name).ToLower();

            if (!allowedExtensions.Contains(fileExtension))
            {
                ErrorMessage = "Formato de imagen no soportado. Use JPG, PNG o GIF";
                return;
            }

            // Crear nombre único para el archivo
            var fileName = $"{Guid.NewGuid()}{fileExtension}";
            var folderPath = Path.Combine("wwwroot", "uploads", "productos");
            var fullPath = Path.Combine(Directory.GetCurrentDirectory(), folderPath);

            // Crear directorio si no existe
            if (!Directory.Exists(fullPath))
            {
                Directory.CreateDirectory(fullPath);
            }

            // Guardar archivo
            var path = Path.Combine(fullPath, fileName);
            await using var stream = new FileStream(path, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(stream);

            // Asignar URL relativa al modelo
            producto.ImagenURL = $"/uploads/productos/{fileName}";
            ErrorMessage = string.Empty;

            // Forzar actualización de la vista
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error al subir la imagen: {ex.Message}";
        }
    }

    // Métodos existentes (se mantienen igual)
    protected override async Task OnInitializedAsync()
    {
        ListaProveedores = await proveedoresService.ListarProveedores();
    }

    private async Task OnValidSubmit()
    {
        try
        {
            if (await productoService.SaveAsync(producto))
            {
                await JSRuntime.InvokeVoidAsync("alert", "Producto guardado correctamente");
                navigationManager.NavigateTo("/Producto/IndexAdmin");
            }
        }
        catch (InvalidOperationException ex)
        {
            ErrorMessage = ex.Message;
        }
        catch (Exception ex)
        {
            ErrorMessage = "Ocurrió un error inesperado. Por favor, intenta nuevamente.";
        }
    }

    private void VolverAlIndice()
    {
        navigationManager.NavigateTo("/Producto/IndexAdmin");
    }
}