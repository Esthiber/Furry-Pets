@page "/veterinaria"
@using PawfectMatch.Models
@using PawfectMatch.Services
@inject ProductosService ProductosService
@rendermode InteractiveServer

<div class="facturacion-wrapper">

    <div class="facturacion-header">
        <div class="facturacion-logo-container">
            <img src="/Img/Logo/logo0.png" alt="Logo" class="facturacion-logo" />
        </div>

        <div class="facturacion-titulo-container">
            <h1 class="facturacion-titulo">SoulveTruck</h1>
        </div>

        <div class="facturacion-cajero-container">
            <span class="nombre-cajero">Cajero: Ronalfy</span>
        </div>
    </div>

    <div class="titular">
        <h2>Facturación Veterinaria</h2>
        <p>Selecciona productos para agregar a la lista de compra:</p>
    </div>

    <div class="facturacion-layout">
        <div class="facturacion-productos">
            @if (ProductosDisponibles == null)
            {
                <div>Cargando productos...</div>
            }
            else if (!ProductosDisponibles.Any())
            {
                <div>No hay productos disponibles.</div>
            }
            else
            {
                @foreach (var prod in ProductosDisponibles)
                {
                    <CardProductos Producto="prod" OnSeleccionarProducto="AgregarProducto" />
                }
            }
        </div>
        <div class="facturacion-lista">
            <ListaCompra ProductosSeleccionados="Carrito"
                         OnEliminarProducto="QuitarProducto" />
        </div>
    </div>

</div>

@code {
    List<Productos> ProductosDisponibles = new();
    List<Productos> Carrito = new();

    protected override async Task OnInitializedAsync()
    {
        // Mostrar solo productos en stock y no eliminados
        ProductosDisponibles = await ProductosService.ListAsync(p => !p.IsDeleted && p.Stock > 0);
    }

    void AgregarProducto(Productos producto)
    {
        // Permite agregar repetidos, o para evitarlo verifica primero
        Carrito.Add(producto);
        StateHasChanged();
    }

    void QuitarProducto(Productos producto)
    {
        Carrito.Remove(producto); // Remueve la primera instancia encontrada
        StateHasChanged();
    }
}